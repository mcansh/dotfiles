#!/usr/bin/env bash

# Usage: `curl https://raw.githubusercontent.com/mcansh/dotfiles/master/.macos | bash`

# Set up logging environment
LOG_FILE='/Users/($HOME)/Desktop/install-log.log'

exec &> >(tee -a "$LOG_FILE")
echo "Logging to" $LOG_FILE

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

echo "Hello $(whoami)! Let's get you set up."

###############################################################################
# homebrew                                                                    #
###############################################################################

echo "installing homebrew"
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

echo "installing things from homebrew"
# act: Run your GitHub Actions locally ðŸš€
# asimov: Automatically exclude development dependencies from Time Machine backups
# awscli: Official Amazon AWS command-line interface
# bat: Clone of cat(1) with syntax highlighting and Git integration
# caddy: Powerful, enterprise-ready, open source web server with automatic HTTPS
# deno: Secure runtime for JavaScript and TypeScript
# dog: Command-line DNS client
# fish: User-friendly command-line shell for UNIX-like operating systems
# gh: GitHub command-line tool
# gifify: Turn movies into GIFs
# git: Distributed revision control system
# git-delta: Syntax-highlighting pager for git and diff output
# gnupg: GNU Pretty Good Privacy (PGP) package
# gnupg@2.2: GNU Pretty Good Privacy (PGP) package
# httpie: User-friendly cURL replacement (command-line HTTP client)
# jq: Lightweight and flexible command-line JSON processor
# mysql-client: Open source relational database management system
# n: Node version management
# pinentry-mac: Pinentry for GPG on Mac
# pscale: The PlanetScale CLI
# railway: Develop and deploy code with zero configuration
# nixpacks: App source + Nix packages + Docker = Image
# ripgrep: Search tool like grep and The Silver Searcher
# flyctl: CLI for Fly.io
# thefuck: Programmatically correct mistyped console commands
# tig: Text interface for Git repositories
# wget: Internet file retriever
# xcodegen: Generate your Xcode project from a spec file and your folder structure
# xh: Friendly and fast tool for sending HTTP requests
# youtube-dl: Download YouTube videos from the command-line
brew install act asimov awscli bat caddy deno dog fish gh gifify git git-delta gnupg gnupg@2.2 httpie jq mysql-client n pinentry-mac pscale railway nixpacks ripgrep flyctl thefuck tig wget xcodegen xh youtube-dl

# finicky: Utility for customizing which browser to start
# backblaze: Data backup and storage service
# ngrok: Reverse proxy, secure introspectable tunnels to localhost
# rescuetime: Time optimising application
brew install --cask finicky backblaze	ngrok rescuetime

echo "installing oh my fish"
curl -L https://get.oh-my.fish | fish

echo "installing node (via n-install)"
n latest

echo "node --version: $(node --version)"
echo "npm --version: $(npm --version)"

echo "installing a few global npm packages"
npm i -g trash-cli fkill-cli @antfu/ni corepack

# install yarn v1
corepack prepare yarn@1 --activate
# install pnpm
corepack prepare pnpm@latest --activate

echo "Generating an RSA token for GitHub"
mkdir -p ~/.ssh
ssh-keygen -t rsa -b 4096 -C "logan@mcan.sh"
echo "Host *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_rsa" | tee ~/.ssh/config
eval "$(ssh-agent -s)"
echo "run 'pbcopy < ~/.ssh/id_rsa.pub' and paste that into GitHub"


echo "cloning dotfiles"
git clone git@github.com:mcansh/dotfiles.git "${HOME}/.dotfiles"
ln -s "${HOME}/.dotfiles/fish" "${HOME}/.config/fish"
ln -s "${HOME}/.dotfiles/omf" "${HOME}/.config/omf"
ln -s "${HOME}/.dotfiles/starship.toml" "${HOME}/.config/starship.toml"
ln -s "${HOME}/.dotfiles/.my_bin" "${HOME}/.my_bin"
ln -s "${HOME}/.dotfiles/.gitignore_global" "${HOME}/.gitignore_global"
ln -s "${HOME}/.dotfiles/.hyper.js" "${HOME}/.hyper.js"
ln -s "${HOME}/.dotfiles/.gitconfig" "${HOME}/.gitconfig"
ln -s "${HOME}/.dotfiles/.yarnrc" "${HOME}/.yarnrc"
ln -s "${HOME}/.dotfiles/code/settings.json" "${HOME}/Library/Application Support/Code - Insiders/User"
ln -s "${HOME}/.dotfiles/code/keybindings.json" "${HOME}/Library/Application Support/Code - Insiders/User"

echo "making system modifications:"

# Set HostName/ComputerName/LocalHostName
scutil --set ComputerName "ðŸ’»"
scutil --set LocalHostName "mcansh"
scutil --set HostName "mcansh"

# Computer sleeps after 2 minutes
systemsetup -setcomputersleep 2

# Add a message to the login screen
defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "This computer belongs to Logan McAnsh"

# Stop safari from opening downloaded files automatically
defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

# Set sidebar icon size to small
defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 1

# Only show open apps in Dock
defaults write com.apple.dock static-only -bool true

# Remove Dock auto-hiding delay
defaults write com.apple.dock autohide-delay -float 0

# Remove Dock show delay
defaults write com.apple.dock autohide-time-modifier -float 0

# Make hidden apps transparent
defaults write com.apple.Dock showhidden -bool true

# Remove shadow from screenshots
defaults write com.apple.screencapture disable-shadow -bool true

# Change screenshot format
defaults write com.apple.screencapture type jpg

# Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Expand print panel by default
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# Disable Annoying Disk Warning
sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.DiskArbitration.diskarbitrationd.plist DADisableEjectNotification -bool YES && sudo pkill diskarbitrationd

# Give NPM proper global install permissions
sudo chown -R $USER /usr/local/lib/node_modules
sudo chown -R $(whoami) ~/.npm

# Restart dock
killall Dock

# Restart menubar
killall -KILL SystemUIServer

# Check if FileValut is on
echo '> 3/4 Checking FileValue Status'
if [ "$(fdesetup status)" == "FileVault is On." ]; then
  echo "> Disk encryption is already enabled. ðŸ”¥"
elif [ "$(fdesetup status)" == "FileVault is Off." ]; then
  echo "> Disk encryption not enabled. Enabling now..."
  fdesetup enable
fi

# Mac Software Update Check and install updates
softwareupdate -ia --verbose --restart

# WE OUT
echo "> Welcome to your newly configured MacBook"
