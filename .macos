#!/usr/bin/env bash

# Usage: `curl https://raw.githubusercontent.com/mcansh/dotfiles/master/.macos | bash`

# Set up logging environment
LOG_FILE=$HOME/Desktop/install-log.log

exec &> >(tee -a "$LOG_FILE")
echo "Logging to" $LOG_FILE

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

echo "Hello $(whoami)! Let's get you set up."

###############################################################################
# lets get down to business                                                   #
###############################################################################

DOTFILES="${HOME}/.dotfiles"

echo "cloning dotfiles"
git clone git@github.com:mcansh/dotfiles.git ${DOTFILES}

echo "installing oh-my-fish"
curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish

# set up symlinks
echo "setting up symlinks"

if [ -d "${HOME}/.config/fish" ]
then
  echo ""~/.config/fish" already exists, please check and merge the contents."
else
  ln -s "${DOTFILES}/fish" "${HOME}/.config/fish"
fi

if [ -d "${HOME}/.config/omf" ]
then
  echo ""~/.config/omf" already exists, please check and merge the contents."
else
  ln -s "${DOTFILES}/omf" "${HOME}/.config/omf"
fi

if [ -d "${HOME}/.config/zed" ]
then
  echo ""~/.config/zed" already exists, please check and merge the contents."
else
  ln -s "${DOTFILES}/zed" "${HOME}/.config/zed"
fi

if [ -d "${HOME}/.my_bin" ]
then
  echo ""~/.my_bin" already exists, please check and merge the contents."
else
  ln -s "${DOTFILES}/.my_bin" "${HOME}/.my_bin"
fi


if [ -f "${HOME}/.gitignore_global" ]
then
  echo ""~/.gitignore_global" already exists, please check and merge the contents."
else
  ln -s "${DOTFILES}/.gitignore_global" "${HOME}/.gitignore_global"
fi

if [ -f "${HOME}/.gitconfig" ]
then
  echo ""~/.gitconfig" already exists, please check and merge the contents."
else
  ln -s "${DOTFILES}/.gitconfig" "${HOME}/.gitconfig"
fi

if [ -f "${HOME}/.yarnrc" ]
then
  echo ""~/.yarnrc" already exists, please check and merge the contents."
else
  ln -s "${DOTFILES}/.yarnrc" "${HOME}/.yarnrc"
fi


GHOSTTY_CONFIG="${HOME}/Library/Application Support/com.mitchellh.ghostty/config"

if [ -f "${GHOSTTY_CONFIG}" ]
then
  echo "ghostty config already exists, please check and merge the contents."
else
  ln -s "${DOTFILES}/ghostty.config" "${GHOSTTY_CONFIG}"
fi


###############################################################################
# homebrew (and related thing)                                                #
###############################################################################

echo "installing homebrew"
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

echo "installing things from homebrew"
brew bundle --file "${DOTFILES}/Brewfile"

# Install latest version of Node.js
export N_PRESERVE_NPM=1
export N_PREFIX="$HOME/.n"
export PATH="$N_PREFIX/bin:$PATH"
n latest

echo "node --version: $(node --version)"
echo "npm --version: $(npm --version)"

echo "installing a few global npm packages"
npm i -g trash-cli fkill-cli @antfu/ni corepack

# install yarn v1
corepack prepare yarn@1 --activate
# install latest pnpm
corepack prepare pnpm@latest --activate
# install latest npm
corepack prepare npm@latest --activate

###############################################################################
# system modifications                                                        #
###############################################################################

echo "making system modifications:"

# Set HostName/ComputerName/LocalHostName
scutil --set ComputerName "ðŸ’»"
scutil --set LocalHostName "mcansh"
scutil --set HostName "mcansh"

# Computer sleeps after 2 minutes
systemsetup -setcomputersleep 2

# Add a message to the login screen
defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "This computer belongs to Logan McAnsh"

# Stop safari from opening downloaded files automatically
defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

# Set sidebar icon size to small
defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 1

# Only show open apps in Dock
defaults write com.apple.dock static-only -bool true

# Remove Dock auto-hiding delay
defaults write com.apple.dock autohide-delay -float 0

# Remove Dock show delay
defaults write com.apple.dock autohide-time-modifier -float 0

# Make hidden apps transparent
defaults write com.apple.Dock showhidden -bool true

# Remove shadow from screenshots
defaults write com.apple.screencapture disable-shadow -bool true

# Change screenshot format
defaults write com.apple.screencapture type jpg

# Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

# Expand print panel by default
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

# Disable Annoying Disk Warning
sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.DiskArbitration.diskarbitrationd.plist DADisableEjectNotification -bool YES && sudo pkill diskarbitrationd

# Give NPM proper global install permissions
sudo chown -R $USER /usr/local/lib/node_modules
sudo chown -R $(whoami) ~/.npm

# Restart dock
killall Dock

# Restart menubar
killall -KILL SystemUIServer

# Check if FileValut is on
echo '> 3/4 Checking FileValue Status'
if [ "$(fdesetup status)" == "FileVault is On." ]; then
  echo "> Disk encryption is already enabled. ðŸ”¥"
elif [ "$(fdesetup status)" == "FileVault is Off." ]; then
  echo "> Disk encryption not enabled. Enabling now..."
  fdesetup enable
fi

# Mac Software Update Check and install updates
sudo softwareupdate -ia --verbose --restart

# WE OUT
echo "> Welcome to your newly configured MacBook"
